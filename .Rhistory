devtools::load_all(".")
spacebucket(A, B, C)
ls()
rm(spacebucket())
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
usethis::use_pipe()
usethis::use_roxygen_md()
devtools::load_all(".")
spacebucket(A, B, C)
library(spacebucket)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
library(magrittr)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
st_geometry(A)
library(sf)
st_geometry(A)
str(st_geometry(A))
str(unclass(st_geometry(A)))
devtools::load_all(".")
spacebucket(A, B, C)
get_projection.sfc(A)
attr(A, "crs")
attr(st_geometry(A), "crs")
attr(st_geometry(A), "crs") %>% unclass()
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
inputs <- list(A, B, C)
inputs0 <- lapply(seq_along(inputs), function(x) sf::st_sf(layer = x, geometry = sf::st_geometry(inputs[[x]])))
seq_along(inputs)
x = 1
sf::st_sf(layer = x, geometry = sf::st_geometry(inputs[[x]]))
inputs[[x]]
sf::st_geometry(inputs[[x]])
sf::st_sf(layers = x, geometry = sf::st_geometry(inputs[[x]]))
inputs0 <- lapply(seq_along(inputs),
function(x) sf::st_sf(layer = rep(x, length(inputs[[x]][[1]])), geometry = sf::st_geometry(inputs[[x]])))
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
library(spacebucket)
?decido::earcut
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
?pfft::path_triangle_map
pfft::edge_RTriangle
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
library(pfft)
example("path_triangle_map")
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
plot(st_union(A, B))
graphics.off()
plot(st_union(A, B))
plot(st_combine(A, B))
plot(st_combine(A))
?st_combine
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
spacebucket(A, B, C)$index
spacebucket(A, B, C)$index$triangle_idx
length(unique(spacebucket(A, B, C)$index$triangle_idx))
nlevels(factor(unique(spacebucket(A, B, C)$index$triangle_idx)))
table(spacebucket(A, B, C)$index$triangle_idx))
table(spacebucket(A, B, C)$index$triangle_idx)
table(spacebucket(A, B, C)$index$triangle_idx) > 1
sum(table(spacebucket(A, B, C)$index$triangle_idx) > 1)
devtools::load_all(".")
spacebucket(A, B, C)
devtools::load_all(".")
spacebucket(A, B, C)
plot(spacebucket(A, B, C))
x <- spacebucket(A, B, C)
plot(x$primitives$P, pch = ".")
x$primitives$P[t(cbind(x$primitives$T, x$primitives$T[,1], NA)), ]
tail(1:10, -1)
head(1:10, -1)
polypath(head(x$primitives$P[t(cbind(x$primitives$T, x$primitives$T[,1], NA)), ], -1))
usethis::use_dev_package("hypertidy/silicate")
silicate::ARC
usethis::use_dev_package("silicate")
usethis::use_dev_package("pfft")
usethis::use_dev_package("gibble")
usethis::use_package("dplyr")
devtools::load_all(".")
library(spacebucket)
spacebucket(A, B, C)
plot(spacebucket(A, B, C))
library(sf)
example(st_read)
plot(nc)
st_jitter(nc)
plot(st_jitter(nc))
plot(st_jitter(nc)[[1]])
plot(st_jitter(nc)[, 1])
plot(st_jitter(nc, amount = 1)[, 1])
plot(st_jitter(nc, amount = .1)[, 1])
bucket <- spacebucket(nc, st_jitter(nc, amount = 0.1))
bucket
plot(bucket)
devtools::load_all(".")
plot(bucket)
bucket
spacebucket(A, B, C)
library(spacebucket)
devtools::load_all(".")
spacebucket(A, B, C)
x <- spacebucket(A, B, C)
plot(x)
x$index
PATH(nc)
silicate::PATH(nc)
devtools::load_all(".")
x <- spacebucket(A, B, C)
x
x$index
x$input
x$geometry_map
inputs
layers <- lapply(seq_along(inputs), function(a) rep(a, nrow(inputs[[a]])))
layers
layers <- unlist(lapply(seq_along(inputs), function(a) rep(a, nrow(inputs[[a]]))))
layers
x$geometry_map
devtools::load_all(".")
x <- spacebucket(A, B, C)
devtools::load_all(".")
x <- spacebucket(A, B, C)
devtools::load_all(".")
x <- spacebucket(A, B, C)
devtools::load_all(".")
x <- spacebucket(A, B, C)
x$input
x$geometry_map
bucket <- spacebucket(nc, st_jitter(nc, amount = 0.1))
plot(bucket)
bucket$geometry_map
x
table(x$index$triangle_idx)
x$index %>% group_by(triangle_idx) %>% dplyr::filter(n() > 1)
## if all layers share a triangle we keep them
index <- x$index %>% group_by(triangle_idx) %>% dplyr::filter(n() > 1)
index
index %>% ungroup()
x$index
devtools::load_all(".")
x <- spacebucket(A, B, C)
x$geometry_map
## if all layers share a triangle we keep them
index <- x$index %>% group_by(triangle_idx) %>% dplyr::filter(n() > 1)
## if all layers share a triangle we keep them
index <- x$index %>% group_by(triangle_idx) %>% dplyr::filter(n() > 1) %>% ungroup()
index$layer <- x$geometry_map$layer[match(index$path_, x$geometry_map$path)]
index
tail(index)
triangles <- x$primitives$T[index$triangle_idx, ]
polypath(x$primitives$P[t(cbind(triangles, triangles[,1], NA)), ], ...)... =
sb_intersection <- function(x, ...) {
plot(x)
## if all layers share a triangle we keep them
index <- x$index %>% group_by(triangle_idx) %>% dplyr::filter(n() > 1) %>% ungroup()
index$layer <- x$geometry_map$layer[match(index$path_, x$geometry_map$path)]
triangles <- x$primitives$T[index$triangle_idx, ]
polypath(x$primitives$P[t(cbind(triangles, triangles[,1], NA)), ], ...)
}
sb_intersection(x)
sb_intersection <- function(x, ...) {
plot(x)
## if all layers share a triangle we keep them
index <- x$index %>% group_by(triangle_idx) %>% dplyr::filter(n() > 1) %>% ungroup()
index$layer <- x$geometry_map$layer[match(index$path_, x$geometry_map$path)]
triangles <- x$primitives$T[index$triangle_idx, ]
polypath(x$primitives$P[head(t(cbind(triangles, triangles[,1], NA)), -1L), ], ...)
}
sb_intersection(x)
sb_intersection(x, col = "grey")
plot(A)
plot(A[,])
plot(A[,1])
plot(A[,1], legend = F)
plot(A[,1], reset = TRUE)
plot(B, add = T)
plot.sf <- function(x, ...) sp::plot(as(x, "Spatial"), ...)
plot(A)
plot(B, add  = T)
plot(C, add  = T)
sb_intersection(x, col = "grey")
x$index
x$geometry_map
x$index$path_
sb_intersection(spacebucket(A, B), col = "grey")
sb_intersection(spacebucket(A, C), col = "grey")
sb_intersection(spacebucket(B, C), col = "grey")
sb_intersection(spacebucket(A, B, C), col = "grey")
usethis::use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
library(spacebucket)
bucket <- spacebucket(A, B, C)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
library(spacebucket)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket)
## show the components pieces
plot(bucket, asp = 1)
devtools::load_all(".")
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
library(spacebucket)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
spacebucket:::sb_intersection(bucket)
devtools::load_all(".")
spacebucket:::sb_intersection(bucket)
devtools::load_all(".")
spacebucket:::sb_intersection(bucket)
spacebucket:::sb_intersection(bucket, col = "firebrick")
spacebucket:::sb_intersection(bucket, col = "firebrick")
## but it works with pairs
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
library(spacebucket)
usethis::create_package("../basf")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
## there's an error somewhere
spacebucket:::sb_intersection(bucket, col = "firebrick")
devtools::load_all(".")
inputs <- list(A, B, C)
layers <- unlist(lapply(seq_along(inputs), function(a) rep(a, nrow(inputs[[a]]))))
inputs0 <- lapply(seq_along(inputs),
function(x) sf::st_sf(layer = rep(x, length(inputs[[x]][[1]])), geometry = sf::st_geometry(inputs[[x]])))
## TODO1
## triangulate the mesh
sfall <- do.call(rbind, inputs0)
path <- silicate::PATH(sfall)
RTri <- pfft::edge_RTriangle(path)
## TODO2
## identify all points by overlap with inputs
map <- pfft::path_triangle_map(path, RTri)
map
index <-   map %>% dplyr::mutate(path_ = match(path_, path$path$path_))
paths <- path[["path"]] %>% dplyr::transmute(subobject, object, ncoords_,
layer = layers[object],
path = dplyr::row_number())
st_make_grid()
st_make_grid(cellsize = c(2, 1))
st_make_grid()
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
plot(R)
library(basf)
plot(R)
graphics.off()
plot(R)
R
class(R)
plot.sf
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
library(basf)
plot(R)
plot(A)
devtools::load_all(".")
plot(A)
plot(R)
R
plot(st_geometry(R))
raster::extent(-1, 1, 0, 1)
raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2)
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
library(sf)
plot(R)
plot(R$geometry)
library(sf)
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
R
plot(R)
plot(st_geometry(R))
graphics.off()
plot(st_geometry(R))
st_geometry(R)
R <- spex::polygonize(setValues(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
plot(R)
library(basf)
plot(R)
sp::HexPoints2SpatialPolygons(SpatialPoints(cbind(0, 0)))
sp::HexPoints2SpatialPolygons(sp::SpatialPoints(cbind(0, 0)))
sp::SpatialPoints(cbind(0, 0))
sp::HexPoints2SpatialPolygons(sp::SpatialPoints(cbind(0:1, 0:1)))
sp::SpatialPoints(cbind(0:1, 0:1))
?sp::HexPoints2SpatialPolygons
sp::HexPoints2SpatialPolygons(sp::SpatialPoints(cbind(c(0, 0, 1, 1), c(0, 1, 0, 1))))
sp::SpatialPoints(cbind(c(0, 0, 1, 1), c(0, 1, 0, 1)))
plot(sp::SpatialPoints(cbind(c(0, 0, 1, 1), c(0, 1, 0, 1))))
library(sp)
plot(sp::SpatialPoints(cbind(c(0, 0, 1, 1), c(0, 1, 0, 1))))
sp::HexPoints2SpatialPolygons(sp::SpatialPoints(cbind(c(0, 1), c(0, 0))))
sp::SpatialPoints(cbind(c(0, 1), c(0, 0)))
plot(sp::SpatialPoints(cbind(c(0, 1), c(0, 0))))
sp::spsample(R)
sp::spsample(as(R, "Spatial"))
sp::spsample(as(R, "Spatial"), type = "hexagonal")
sp::spsample(as(R, "Spatial"), type = "hexagonal", to = 1)
sp::spsample(as(R, "Spatial"), type = "hexagonal", 1)
sp::HexPoints2SpatialPolygons(sp::spsample(as(R, "Spatial"), type = "hexagonal", 1))
sp::HexPoints2SpatialPolygons(sp::spsample(as(R, "Spatial"), type = "hexagonal", 2))
sp::HexPoints2SpatialPolygons(sp::spsample(as(R, "Spatial"), type = "hexagonal", 4))
plot(R)
plot(sp::HexPoints2SpatialPolygons(sp::spsample(as(R, "Spatial"), type = "hexagonal", 4), add = TRUE)
)
plot(sp::HexPoints2SpatialPolygons(sp::spsample(as(R, "Spatial"), type = "hexagonal", 4)), add = TRUE)
plot(sp::HexPoints2SpatialPolygons(sp::spsample(as(R, "Spatial"), type = "hexagonal", 4)), add = F)
plot(R)
R
cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
points(cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
plot(cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
plot(R, xlim = c(-2, 2), ylim = c(-2, 2))
points(cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
points(cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
plot(R, xlim = c(-1, 1), ylim = c(-1, 1), asp = 1)
points(cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
plot(R, xlim = c(-1, 1), ylim = c(-1, 1.5), asp = 1)
points(cbind(c(0, -0.25, -0.25, 0, 0.25, 0.25, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
points(cbind(c(0, -0.5, -0.5, 0, 0.5, 0.5, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
R <- spex::polygonize(raster::raster(raster::extent(-1, 1, 0, 1), nrows = 1, ncols = 2))
plot(R, xlim = c(-1, 1), ylim = c(-1, 1.5), asp = 1)
points(cbind(c(0, -0.5, -0.5, 0, 0.5, 0.5, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)
)
#plot(R, xlim = c(-1, 1), ylim = c(-1, 1.5), asp = 1)
H <- st_sfc(st_polygon(list(
cbind(c(0, -0.5, -0.5, 0, 0.5, 0.5, 0),
c(-0.25, 0.25, 0.75, 1.25, 0.75, 0.25, -0.25))
)))
plot(H)
plot(H, asp = 1)
read.csv("0,-1
-1,-1
-1,0
0,1
0,1
1,0")
read.csv(text = "0,-1
-1,-1
-1,0
0,1
0,1
1,0")
read.csv(text = "0,-1
-1,-1
-1,0
0,1
0,1
1,0") %>% plot()
read.csv(text = "0,-1
-1,-1
-1,0
0,1
0,1
1,0") %>% plot(asp = 1)
plot(R)
grid()
axis(1)
axis(2)
cadfile <- raadfiles::thelist_files(pattern = "parcels_hobart")
cadfile
?raadfiles::thelist_files
?raadfiles::thelist
thelist_files()
f <- raadfiles::thelist_files()
f
f$file
f1 <- raadfiles::thelist_files(pattern = "RASPBERRIES")
f2 <- raadfiles::thelist_files(pattern = "STRAWBERRIES")
plot(read_sf(f1))
plot(read_sf(f1$fullname[1]))
library(basf)
plot(read_sf(f1$fullname[1]))
x <- read_sf(f1$fullname[1])
f1$fullname[1]
f1 <- raadfiles::thelist_files(pattern = "RASPBERRIES", format = "shp")
f1
st_layers(f1$fullname[1])
f1 <- raadfiles::thelist_files(pattern = "hobart_parcels")
f2 <- raadfiles::thelist_files(pattern = "water_districts")
f2
x1 <- read_sf(f1$fullname[1])
x2 <- read_sf(f2$fullname[1])
f1
f1 <- raadfiles::thelist_files(pattern = "parcels_hobart")
x1 <- read_sf(f1$fullname[1])
plot(x1)
plot(x2)
plot(x1, add = T)
plot(x1, add = T, col = "red")
f2 <- raadfiles::thelist_files(pattern = "tasveg_30_groups_hobart")
x1 <- read_sf(f1$fullname[1])
x2 <- read_sf(f2$fullname[1])
plot(x2)
plot(x2, col = viridis::viridis(nrow(x2)))
plot(x1, add = T)
library(spacebucket)
bucket <- spacebucket(x1, x2)
dim(x1)
plot(x1[1:10, ])
plot(x2[x1, ])
plot(x1[1:10, ])
plot(x2, add = TRUE)
plot(x2[x1[1:10, ], ])
x1 <- x1[1:10, ]
x2 <- x2[x1, ]
library(spacebucket)
bucket <- spacebucket(x1, x2)
plot(bucket)
devtools::load_all(".")
sb_intersection(bucket)
sb_intersection(bucket, col = "firebrick")
inputs <- list(A, B, C)
inputs <- list(...)
layers <- unlist(lapply(seq_along(inputs), function(a) rep(a, nrow(inputs[[a]]))))
inputs0 <- lapply(seq_along(inputs),
function(x) sf::st_sf(layer = rep(x, length(inputs[[x]][[1]])), geometry = sf::st_geometry(inputs[[x]])))
devtools::load_all(".")
inputs <- spacebucket(A, B, C)
layers <- unlist(lapply(seq_along(inputs), function(a) rep(a, nrow(inputs[[a]]))))
inputs <- list(A, B, C)
layers <- unlist(lapply(seq_along(inputs), function(a) rep(a, nrow(inputs[[a]]))))
inputs0 <- lapply(seq_along(inputs),
function(x) sf::st_sf(layer = rep(x, length(inputs[[x]][[1]])), geometry = sf::st_geometry(inputs[[x]])))
## TODO1
## triangulate the mesh
sfall <- do.call(rbind, inputs0)
path <- silicate::PATH(sfall)
RTri <- pfft::edge_RTriangle(path)
## TODO2
## identify all points by overlap with inputs
map <- pfft::path_triangle_map(path, RTri)
map
index <-   map %>% dplyr::mutate(path_ = match(path_, path$path$path_))
paths <- path[["path"]] %>% dplyr::transmute(subobject, object, ncoords_,
layer = layers[object],
path = dplyr::row_number())
pfft::path_triangle_map
plot(map$triangle_idx)
