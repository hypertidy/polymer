}
n_intersections(x)
plot(n_intersections(x))
plot(x)
st_intersection(x)
devtools::load_all(".")
sb_intersection(x)
sb_intersection(x, col = "firebrick")
plot(n_intersections(x))
plot(n_intersections(x, 3))
plot(sf::st_geometry(sf::st_merge(A, B, C)))
plot(sf::st_geometry(sf::st_combine(A, B, C)))
plot(sf::st_geometry(sf::st_combine(A, B)))
plot(sf::st_geometry(sf::st_union(A, B)))
A
B
C
st_union(A, B)
sf::st_union(A, B)
plot(A, reset = TRUE)
graphics.off()
plot(A, reset = TRUE)
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE)
plot(C, add = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersection(sb, n = 3), add = TRUE, col = "dogerblue")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dogerblue")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
library(spacebucket)
library(spacebucket)
plot(field)
plot(soil)
plot(soil, reset = TRUE)
plot(field, add = TRUE)
graphics.off()
plot(field, add = TRUE)
plot(soil, reset = TRUE)
plot(field, add = TRUE)
soil
field
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, st_jitter(A, 0.1)), col = "firebrick")
library(spacebucket)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, st_jitter(A, 0.1)), col = "firebrick")
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
#'
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
library(spacebucket)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
plot(n_intersections(sb))
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
plot(A["layer"], reset = TRUE)
plot(n_intersections(sb), add = TRUE, col = "grey")
library(basf)
plot(A["layer"], col = viridis::viridis(nrow(A)))
profvis::profvis({plot(A["layer"], col = viridis::viridis(nrow(A)))})
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: example
library(spacebucket)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
# Chunk 3
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
# Chunk 4: nintersections
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
library(basf)
plot(A["layer"], col = viridis::viridis(nrow(A)))
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], col = viridis::viridis(nrow(A)))
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
plot(n_intersections(polb), add = TRUE)
plot(n_intersections(polb), add = TRUE, col = rainbow(3))
plot(n_intersections(polb), add = TRUE, col = rgb(0, 0, 0, 0.3), border = "firebrick", lwd = 2)
plot(polb)
plot(n_intersections(polb), add = TRUE, col = rgb(0, 0, 0, 0.3), border = "firebrick", lwd = 2)
plot(field)
plot(soil)
sf::sf.colors
plot(soil, col = sf::sf.colors(n = nrow(soil)))
plot(field, add = TRUE, col = sf::sf.colors(n = nrow(field), categorical =  TRUE))
plot(n_intersections(soil_field), add = TRUE)
plot(soil, col = sf::sf.colors(n = nrow(soil)))
plot(field, add = TRUE, col = sf::sf.colors(n = nrow(field), categorical =  TRUE))
soil_field <- spacebucket(soil, field)
plot(n_intersections(soil_field), add = TRUE)
plot(soil, col = sf::sf.colors(n = nrow(soil)), border = NA)
plot(field, add = TRUE, col = sf::sf.colors(n = nrow(field), categorical =  TRUE), border = NA)
soil_field <- spacebucket(soil, field)
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.2, 0.2, 0.2))
plot(field, add = TRUE, col = NA)
plot(soil, col = sf::sf.colors(n = nrow(soil)), border = NA)
plot(field, add = TRUE, col = NA)
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.2, 0.2, 0.2))
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.5, 0.5, 0.5, 0.2))
plot(soil, col = sf::sf.colors(n = nrow(soil)), border = NA)
plot(field, add = TRUE, col = NA)
soil_field <- spacebucket(soil, field)
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.5, 0.5, 0.5, 0.2))
pkgdown::build_site()
profvis::profvis({library(basf)})
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: example
library(spacebucket)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
# Chunk 3
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
library(basf)
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: example
library(spacebucket)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
# Chunk 3
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: example
library(spacebucket)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
# Chunk 3
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: example
library(spacebucket)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
# Chunk 3
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
# Chunk 4: nintersections
library(basf)
plot(A["layer"], col = viridis::viridis(nrow(A)))
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
n_intersections(sb)
plot(A["layer"], col = viridis::viridis(nrow(A)))
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
n_intersections(sb)
n_intersections(sb)
x <- n_intersections(sb)
x$idx.data
x <- n_intersections(sb, n = 3)
plot(x)
x
library(tibble)
x
library(tidyr)
x
as_tibble(x)
as_tibble(x) %>% unnest()
as_tibble(x) %>%  select(-geometry) %>% unnest()
library(dplyr)
as_tibble(x) %>%  select(-geometry) %>% unnest()
############################################
### Extract NSIDC geotiff data to points ###
############################################
#Load libraries
require(tidyverse)
require(lubridate)
require(httr)
require(raster)
require(RCurl)
require(rgdal)
require(sf)
require(viridis)
#Load in sample data
dat = structure(list(id = c("1", "1", "1", "1", "1", "1", "1", "1",
"1", "1", "1", "1", "1", "1", "1", "1", "1", "1"), date = structure(c(1496293200,
1496379600, 1496466000, 1496552400, 1496638800, 1496725200, 1496811600,
1496898000, 1496984400, 1497070800, 1497157200, 1497243600, 1497330000,
1497416400, 1497502800, 1497589200, 1497675600, 1497762000), class = c("POSIXct",
"POSIXt"), tzone = "UTC"), lon = c(7.67676622815245, 8.32651129486591,
9.30056600314477, 9.45250360572033, 9.60916520099151, 9.77475128937539,
10.1061720842052, 10.1710542009332, 9.90688750274992, 9.81325388550969,
10.4855223523313, 11.5879347141201, 11.1764074647293, 11.1285814662996,
11.0955496956579, 11.2381946111766, 11.0354486782552, 10.9479339290118
), lat = c(79.1491984152386, 79.2639703417475, 79.3592790529816,
79.3924837009205, 79.4415010492375, 79.5094211441373, 79.6192990247995,
79.6480471177488, 79.6914819415593, 79.769581367991, 79.9154387708053,
79.9810654837584, 80.0169452297861, 79.9918142858824, 79.9980199574213,
79.9860598615852, 79.9910041289865, 79.9753439508087), lon.se = c(0.0633655756906932,
0.114755482879892, 0.0757837818685542, 0.0900480403465911, 0.0645958828587992,
0.0881363142635468, 0.0286578317608318, 0.0699719826533174, 0.0578032562549854,
0.0540794853847073, 0.0626218863526746, 0.111825808555079, 0.0422916670580266,
0.060029548866816, 0.0752812171499952, 0.045144065564274, 0.0407297531852337,
0.0535020480527324), lat.se = c(0.0138951487651622, 0.0256553862829213,
0.0162791965430388, 0.0208636195015253, 0.0145311803500762, 0.0197045213192155,
0.00823009511074715, 0.0147462106154249, 0.0128565358466395,
0.0120828817775333, 0.013947113178654, 0.0253086237821025, 0.00989262859261941,
0.0139588308974151, 0.0166477882149834, 0.0100829843756892, 0.00889804253914898,
0.0119026752050172)), row.names = c(NA, -18L), spec = structure(list(
cols = structure(list(id = structure(list(), class = c("collector_character",
"collector")), date = structure(list(format = ""), .Names = "format", class = c("collector_datetime",
"collector")), lon = structure(list(), class = c("collector_double",
"collector")), lat = structure(list(), class = c("collector_double",
"collector")), lon.se = structure(list(), class = c("collector_double",
"collector")), lat.se = structure(list(), class = c("collector_double",
"collector"))), .Names = c("id", "date", "lon", "lat", "lon.se",
"lat.se")), default = structure(list(), class = c("collector_guess",
"collector"))), .Names = c("cols", "default"), class = "col_spec"), .Names = c("id",
"date", "lon", "lat", "lon.se", "lat.se"), class = c("tbl_df",
"tbl", "data.frame"))
#First append raster file name based on year month day
dat = dat %>%
mutate(year = year(date), month = month(date), mon = month(date, label = T, abbr = T), day = day(date)) %>%
mutate(month = ifelse(month < 10, paste("0", month, sep=""), paste(month))) %>%
mutate(day = ifelse(day < 10, paste("0", day, sep=""), paste(day))) %>%
mutate(fn = paste0("ftp://anonymous:wjg5@sidads.colorado.edu/DATASETS/NOAA/G02135/north/daily/geotiff/",
year, "/", month, "_", mon, "/N_", year, month, day, "_concentration_v3.0.tif"))
dat
dat$fn
x <- readOGR(tthelist_files(pattern = "parcel", format = "shp")$fullname[1])
library(raadfiles)
library(rgdal)
#x <- do.call(rbind, lapply(thelist_files(pattern = "parcel", format = "shp")$fullname[1], sf::read_sf))
x <- readOGR(tthelist_files(pattern = "parcel", format = "shp")$fullname[1])
x <- readOGR(thelist_files(pattern = "parcel", format = "shp")$fullname[1])
dim(x)
x <- x[1:500, ]
pryr::object_size(x)
system.time(broom::tidy(x))
system.time(broom::tidy(x))
system.time(spbabel::sptable(x))
spbabel::sptable(x)
spbabel::sptable(x) %>% rename(id = object_, group = branch_, x = x_, y = y_)
library(dplyr)
spbabel::sptable(x) %>% rename(id = object_, group = branch_, x = x_, y = y_)
ggplot(spbabel::sptable(x) %>% rename(id = object_, group = branch_, x = x_, y = y_), aes(x, y, group = group, colour = id))
library(ggplot2)
ggplot(spbabel::sptable(x) %>% rename(id = object_, group = branch_, x = x_, y = y_), aes(x, y, group = group, colour = id))
ggplot(spbabel::sptable(x) %>% rename(id = object_, group = branch_, x = x_, y = y_), aes(x, y, group = group, colour = id)) + geom_polygon()
ggplot(spbabel::sptable(x) %>% rename(id = object_, group = branch_, x = x_, y = y_), aes(x, y, group = group, fill = id)) + geom_polygon()
head(broom::tidy(x))
pryr::object_size(broom::tidy(x))
pryr::object_size(x)
names(x)
pryr::object_size(sf::st_as_sf(x))
pryr::object_size(x@data)
?broom::tidy
library(help = spbabel)
library(help = broom)
spbabel:::sptable.SpatialPolygons
dim(x)
system.time(ggplot2::fortify(x))
system.time(broom::tidy(x))
system.time(spbabel::sptable(x))
x <- readOGR(thelist_files(pattern = "parcel", format = "shp")$fullname[1])
xx <- x
x <- xx[1:1500, ]
pryr::object_size(x)
system.time(ggplot2::fortify(x))
system.time(broom::tidy(x))
system.time(spbabel::sptable(x))
x <- xx[1:3500, ]
pryr::object_size(x)
system.time(ggplot2::fortify(x))
system.time(broom::tidy(x))
system.time(spbabel::sptable(x))
x <- xx
pryr::object_size(x)
system.time(ggplot2::fortify(x))
system.time(spbabel::sptable(x))
library(raster)
r <- raster(volcano)
broom::tidy(r)
library(help = tabularaster)
library(spacebucket)
library(spacebucket)
usethis::use_package("tidyr")
library(testthat)
expect_silent(sb <- spacebucket(B, C))
B
C
spacebucket(B, C)
inputs <- list(B, C)
inputs0 <- lapply(seq_along(inputs),
function(x) sf::st_sf(layer = rep(x, length(inputs[[x]][[1]])), geometry = sf::st_geometry(inputs[[x]])))
## TODO1
## triangulate the mesh
sfall <- do.call(rbind, inputs0)
path <- silicate::PATH(sfall)
RTri <- pfft::edge_RTriangle(path)
path
pfft::edge_RTriangle(path)
traceback()
silicate::sc_edge(path)
