))
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
plot(pol)
disaggregate(pol)
spacebucket(pol[1])
class(pol)
pol <- spPolygons(disaggregate(pol), attr = 1:5)
pol <- spPolygons(disaggregate(pol), attr = data.frame(a= 1:5))
disaggregate(pol)
pol <- spPolygons(disaggregate(pol), attr = data.frame(a = 1:5))
pol <- SpatialPolygonsDataFrame(disaggregate(pol), attr = data.frame(a = 1:5))
pol <- SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5))
spacebucket(pol[1])
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
spacebucket(pol[1])
spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ])
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
plot(polb)
sb_intersection(polb)
devtools::load_all(".")
sb_intersection(polb)
usethis::create_project("../datatas")
library(spacebucket)
library(spacebucket)
plot(A)
plot(B)
plot(C)
library(sf)
# example data from raster package
soil <- st_read(system.file("external/lux.shp", package="raster")) %>%
# add in some fake soil type data
mutate(soil = LETTERS[c(1:6,1:6)]) %>%
select(soil)
# field polygons
field <- c("POLYGON((6 49.75,6 50,6.4 50,6.4 49.75,6 49.75))",
"POLYGON((5.8 49.5,5.8 49.7,6.2 49.7,6.2 49.5,5.8 49.5))") %>%
st_as_sfc(crs = st_crs(soil)) %>%
st_sf(field = c('x','y'), geoms = ., stringsAsFactors = FALSE)
usethis::use_data(soil, field)
library(sf)
library(dplyr)
# example data from raster package
soil <- st_read(system.file("external/lux.shp", package="raster")) %>%
# add in some fake soil type data
mutate(soil = LETTERS[c(1:6,1:6)]) %>%
select(soil)
# field polygons
field <- c("POLYGON((6 49.75,6 50,6.4 50,6.4 49.75,6 49.75))",
"POLYGON((5.8 49.5,5.8 49.7,6.2 49.7,6.2 49.5,5.8 49.5))") %>%
st_as_sfc(crs = st_crs(soil)) %>%
st_sf(field = c('x','y'), geoms = ., stringsAsFactors = FALSE)
usethis::use_data(soil, field)
sb <- spacebucket(soil, field)
devtools::load_all(".")
devtools::install_github("hypertidy/silicate")
devtools::load_all(".")
library(spacebucket)
devtools::load_all(".")
sb <- spacebucket(soil, field)
sb
plot(sb)
plot(sb, col = "firebrick")
sb_ine
sb_intersection(sb)
field
soil
pi <- st_intersection(soil, field)
plot(pi)
?st_intersection
pi
sb
names(sb)
sb$geometry_map
sb$index
devtools::load_all(".")
x <- spacebucket(A, B, C)
x$geometry_map
x$index
library(dplyr)
triangles <- x$index %>% group_by(triangle_idx)
triangles <- x$index %>%
dplyr::group_by(triangle_idx) %>%
dplyr::filter(dplyr::n() > 1) %>%
dplyr::ungroup()
triangles
triangles <- x$index %>%
dplyr::group_by(triangle_idx) %>%
dplyr::mutate(nn = dplyr::n() > 1) %>%
dplyr::ungroup() %>%
dplyr::filter(nn > 1)
triangles
triangles <- x$index %>%
dplyr::group_by(triangle_idx) %>%
dplyr::mutate(nn = dplyr::n()) %>%
dplyr::ungroup() %>%
dplyr::filter(nn > 1)
triangles
split(triangles, triangles$triangle_idx)
x$geometry_map
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
piece %>% dplyr::inner_join(x$geometry_map, "path")
})
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
piece %>% dplyr::inner_join(x$geometry_map, c("path" = "path_"))
})
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
piece %>% dplyr::inner_join(x$geometry_map, c("path_" = "path"))
})
triangles <- x$index %>%
dplyr::group_by(triangle_idx) %>%
dplyr::mutate(nn = dplyr::n()) %>%
dplyr::ungroup() %>%
dplyr::filter(nn > 1) %>%
dplyr::transmute(path = path_, triangle_idx)
triangles
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(x$geometry_map, "path_" = "path")
})
gmap <- x$geometry_map %>%
dplyr::filter(object, layer)
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path_" = "path")
})
usethis::use_package("rlang")
triangles <- x$index %>%
dplyr::group_by(.data$triangle_idx) %>%
dplyr::mutate(nn = dplyr::n()) %>%
dplyr::ungroup() %>%
dplyr::filter(.data$nn > 1) %>%
dplyr::transmute(path = path_, triangle_idx)
gmap <- x$geometry_map %>%
dplyr::select(.data$object, .data$layer)
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path_" = "path")
})
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
})
triangles
gmap
gmap <- x$geometry_map %>%
dplyr::select(.data$object, .data$layer, .data$path)
purrr::map(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
})
purrr::map_df(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
})
purrr::map_df(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
}) %>% dplyr::group_by(triangle_idx)
purrr::map_df(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
}) %>% dplyr::group_by(triangle_idx) %>% tidyr::nest()
## every unique triangle keeps a record of which path, object, layer
## (a bit of redundancy until we get a single path/object index or ...)
idx <- purrr::map_df(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
}) %>% dplyr::group_by(triangle_idx) %>% tidyr::nest()
## now build each triangle
purrr::map(idx$triangle_idx, ~st_polygon(list(x$P[x$primitives$T[.x, ][c(1, 2, 3, 1)], ])))
## now build each triangle
purrr::map(idx$triangle_idx, ~sf::st_polygon(list(x$P[x$primitives$T[.x, ][c(1, 2, 3, 1)], ])))
idx$triangle_idx
.x <- 3
x$P[x$primitives$T[.x, ][c(1, 2, 3, 1)]
, ]
purrr::map(.x, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ])))
## now build each triangle
P <- x$primitives$P
TR <- x$primitives$T
purrr::map(.x, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ])))
purrr::map(idx$triangle_idx, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ])))
sf::st_sfc(purrr::map(idx$triangle_idx, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ]))))
sf::st_sfc(purrr::map(idx$triangle_idx, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ])))) %>% plot()
idx
n_intersections <- function(x, n = 2, ...) {
triangles <- x$index %>%
dplyr::group_by(.data$triangle_idx) %>%
dplyr::mutate(nn = dplyr::n()) %>%
dplyr::ungroup() %>%
dplyr::filter(.data$nn >= n) %>%
dplyr::transmute(path = path_, triangle_idx)
gmap <- x$geometry_map %>%
dplyr::select(.data$object, .data$layer, .data$path)
## every unique triangle keeps a record of which path, object, layer
## (a bit of redundancy until we get a single path/object index or ...)
idx <- purrr::map_df(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
}) %>% dplyr::group_by(triangle_idx) %>% tidyr::nest()
## now build each triangle
P <- x$primitives$P
TR <- x$primitives$T
sf::st_sf(idx = , geometry = sf::st_sfc(purrr::map(idx$triangle_idx, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ])))))
}
devtools::load_all(".")
devtools::load_all(".")
x
x <- spacebucket(A, B, C)
n_intersections(x)
n_intersections <- function(x, n = 2, ...) {
triangles <- x$index %>%
dplyr::group_by(.data$triangle_idx) %>%
dplyr::mutate(nn = dplyr::n()) %>%
dplyr::ungroup() %>%
dplyr::filter(.data$nn >= n) %>%
dplyr::transmute(path = path_, triangle_idx)
gmap <- x$geometry_map %>%
dplyr::select(.data$object, .data$layer, .data$path)
## every unique triangle keeps a record of which path, object, layer
## (a bit of redundancy until we get a single path/object index or ...)
idx <- purrr::map_df(split(triangles, triangles$triangle_idx),
function(piece) {
## path joins us to layer + object
piece %>% dplyr::inner_join(gmap, "path")
}) %>% dplyr::group_by(triangle_idx) %>% tidyr::nest()
## now build each triangle
P <- x$primitives$P
TR <- x$primitives$T
sf::st_sf(idx = idx, geometry = sf::st_sfc(purrr::map(idx$triangle_idx, ~sf::st_polygon(list(P[TR[.x, ][c(1, 2, 3, 1)], ])))))
}
n_intersections(x)
plot(n_intersections(x))
plot(x)
st_intersection(x)
devtools::load_all(".")
sb_intersection(x)
sb_intersection(x, col = "firebrick")
plot(n_intersections(x))
plot(n_intersections(x, 3))
plot(sf::st_geometry(sf::st_merge(A, B, C)))
plot(sf::st_geometry(sf::st_combine(A, B, C)))
plot(sf::st_geometry(sf::st_combine(A, B)))
plot(sf::st_geometry(sf::st_union(A, B)))
A
B
C
st_union(A, B)
sf::st_union(A, B)
plot(A, reset = TRUE)
graphics.off()
plot(A, reset = TRUE)
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE)
plot(C, add = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersection(sb, n = 3), add = TRUE, col = "dogerblue")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dogerblue")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
library(spacebucket)
library(spacebucket)
plot(field)
plot(soil)
plot(soil, reset = TRUE)
plot(field, add = TRUE)
graphics.off()
plot(field, add = TRUE)
plot(soil, reset = TRUE)
plot(field, add = TRUE)
soil
field
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, st_jitter(A, 0.1)), col = "firebrick")
library(spacebucket)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, st_jitter(A, 0.1)), col = "firebrick")
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
#'
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
library(spacebucket)
plot(st_geometry(A), col = viridis::viridis(nrow(A)))
plot(st_geometry(B), col = "firebrick", add = TRUE)
plot(st_geometry(C), col = "dodgerblue", add = TRUE)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
plot(n_intersections(sb))
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
plot(A["layer"], reset = TRUE)
plot(n_intersections(sb), add = TRUE, col = "grey")
library(basf)
plot(A["layer"], col = viridis::viridis(nrow(A)))
profvis::profvis({plot(A["layer"], col = viridis::viridis(nrow(A)))})
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
# Chunk 2: example
library(spacebucket)
plot(sf::st_geometry(A), col = viridis::viridis(nrow(A)))
plot(sf::st_geometry(B), col = "firebrick", add = TRUE)
plot(sf::st_geometry(C), col = "dodgerblue", add = TRUE)
## summarize the contents
(bucket <- spacebucket(A, B, C))
## show the components pieces
plot(bucket, asp = 1)
# Chunk 3
spacebucket:::sb_intersection(bucket, col = "firebrick")
## it works with pairs or with multiple layers
spacebucket:::sb_intersection(spacebucket(A, B), col = "firebrick")
spacebucket:::sb_intersection(spacebucket(C, B), col = "firebrick")
set.seed(sum(match(unlist(strsplit("spacebucket", "")), letters)))
## number of layers is arbitrary
spacebucket:::sb_intersection(spacebucket(C, B, A, sf::st_jitter(A, 0.1)), col = "firebrick")
# Chunk 4: nintersections
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], reset = TRUE)
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
library(basf)
plot(A["layer"], col = viridis::viridis(nrow(A)))
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
plot(A["layer"], col = viridis::viridis(nrow(A)))
plot(B, add = TRUE, col = "hotpink")
plot(C, add = TRUE, col = "firebrick")
sb <- spacebucket(A, B, C)
plot(n_intersections(sb), add = TRUE, col = "grey")
plot(n_intersections(sb, n = 3), add = TRUE, col = "dodgerblue")
library(sp)
x = c(0.5, 0.5, 1.0, 1.5)
y = c(1.5, 0.5, 0.5, 0.5)
xy = cbind(x,y)
dimnames(xy)[[1]] = c("a", "b", "c", "d")
pts = SpatialPoints(xy)
xpol = c(0,1,1,0,0)
ypol = c(0,0,1,1,0)
pol = SpatialPolygons(list(
Polygons(list(Polygon(cbind(xpol-1.05,ypol))), ID="x1"),
Polygons(list(Polygon(cbind(xpol,ypol))), ID="x2"),
Polygons(list(Polygon(cbind(xpol,ypol - 1.0))), ID="x3"),
Polygons(list(Polygon(cbind(xpol + 1.0, ypol))), ID="x4"),
Polygons(list(Polygon(cbind(xpol+.4, ypol+.1))), ID="x5")
))
pol <- st_as_sf(SpatialPolygonsDataFrame(disaggregate(pol), data.frame(a = 1:5)))
(polb <- spacebucket(pol[1, ], pol[2, ], pol[3, ], pol[4, ], pol[5, ]))
plot(polb)
sb_intersection(polb)
plot(n_intersections(polb), add = TRUE)
plot(n_intersections(polb), add = TRUE, col = rainbow(3))
plot(n_intersections(polb), add = TRUE, col = rgb(0, 0, 0, 0.3), border = "firebrick", lwd = 2)
plot(polb)
plot(n_intersections(polb), add = TRUE, col = rgb(0, 0, 0, 0.3), border = "firebrick", lwd = 2)
plot(field)
plot(soil)
sf::sf.colors
plot(soil, col = sf::sf.colors(n = nrow(soil)))
plot(field, add = TRUE, col = sf::sf.colors(n = nrow(field), categorical =  TRUE))
plot(n_intersections(soil_field), add = TRUE)
plot(soil, col = sf::sf.colors(n = nrow(soil)))
plot(field, add = TRUE, col = sf::sf.colors(n = nrow(field), categorical =  TRUE))
soil_field <- spacebucket(soil, field)
plot(n_intersections(soil_field), add = TRUE)
plot(soil, col = sf::sf.colors(n = nrow(soil)), border = NA)
plot(field, add = TRUE, col = sf::sf.colors(n = nrow(field), categorical =  TRUE), border = NA)
soil_field <- spacebucket(soil, field)
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.2, 0.2, 0.2))
plot(field, add = TRUE, col = NA)
plot(soil, col = sf::sf.colors(n = nrow(soil)), border = NA)
plot(field, add = TRUE, col = NA)
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.2, 0.2, 0.2))
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.5, 0.5, 0.5, 0.2))
plot(soil, col = sf::sf.colors(n = nrow(soil)), border = NA)
plot(field, add = TRUE, col = NA)
soil_field <- spacebucket(soil, field)
plot(n_intersections(soil_field), add = TRUE, border = rgb(0.5, 0.5, 0.5, 0.2))
pkgdown::build_site()
